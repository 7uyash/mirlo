generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String   @default("")
  refresh   String?
  artists   Artist[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  isAdmin   Boolean  @default(false)
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  title     String
  content   String?
  published Boolean  @default(false)
  viewCount Int      @default(0)
  author    Artist?  @relation(fields: [authorId], references: [id])
  authorId  Int?
}

model Artist {
  id          Int          @id @default(autoincrement())
  name        String
  bio         String?
  user        User         @relation(fields: [userId], references: [id])
  userId      Int
  posts       Post[]
  trackgroups TrackGroup[]
  enabled     Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt
}

model TrackGroup {
  id          Int              @id @default(autoincrement())
  about       String?
  artist      Artist           @relation(fields: [artistId], references: [id])
  artistId    Int              @unique
  title       String?
  tracks      Track[]
  cover       TrackGroupCover?
  published   Boolean          @default(false)
  type        String?
  releaseDate DateTime         @default(now())
  enabled     Boolean          @default(false)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Track {
  id           Int         @id @default(autoincrement())
  trackGroup   TrackGroup  @relation(fields: [trackGroupId], references: [id])
  trackGroupId Int         @unique
  title        String?
  audio        TrackAudio?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model TrackGroupCover {
  id               String     @id @default(uuid()) @db.Uuid
  url              String?
  trackGroup       TrackGroup @relation(fields: [trackGroupId], references: [id])
  trackGroupId     Int        @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  originalFilename String?
}

model TrackAudio {
  id               String   @id @default(uuid()) @db.Uuid
  url              String?
  track            Track?   @relation(fields: [trackId], references: [id])
  trackId          Int?     @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  originalFilename String?
  duration         Int?
  hash             String?
  size             Int?
}
