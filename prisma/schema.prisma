generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id                 Int      @id @default(autoincrement())
  applicationName    String
  applicationUrl     String
  allowedCorsOrigins String[]
  updatedAt          DateTime
  createdAt          DateTime
  deletedAt          DateTime
}

model User {
  id                     Int                      @id @default(autoincrement())
  email                  String                   @unique
  name                   String?
  password               String                   @default("")
  refresh                String?
  artists                Artist[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime                 @default(now()) @updatedAt
  isAdmin                Boolean                  @default(false)
  ArtistUserSubscription ArtistUserSubscription[]
}

model Post {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  title       String
  content     String?
  publishedAt DateTime @default(now())
  viewCount   Int      @default(0)
  artist      Artist?  @relation(fields: [artistId], references: [id])
  artistId    Int?
}

model Artist {
  id                Int                      @id @default(autoincrement())
  name              String
  bio               String?
  user              User                     @relation(fields: [userId], references: [id])
  userId            Int
  posts             Post[]
  trackGroups       TrackGroup[]
  enabled           Boolean                  @default(false)
  createdAt         DateTime                 @default(now())
  updatedAt         DateTime                 @default(now()) @updatedAt
  subscriptionTiers ArtistSubscriptionTier[]
  userSubscriptions ArtistUserSubscription[]
}

model ArtistSubscriptionTier {
  id            Int      @id @default(autoincrement())
  name          String
  description   String   @default("")
  artistId      Int
  artist        Artist   @relation(fields: [artistId], references: [id])
  minAmount     String?
  allowVariable Boolean?
  maxAmount     String?
  defaultAmount String?
}

model ArtistUserSubscription {
  id                       Int     @id @default(autoincrement())
  artistSubscriptionTierId Int
  artistSubscriptionTier   Artist  @relation(fields: [artistSubscriptionTierId], references: [id])
  userId                   Int
  user                     User    @relation(fields: [userId], references: [id])
  amount                   String
  stripeId                 String?
}

model TrackGroup {
  id           Int              @id @default(autoincrement())
  about        String?
  artist       Artist           @relation(fields: [artistId], references: [id])
  artistId     Int              @unique
  title        String?
  tracks       Track[]
  cover        TrackGroupCover?
  published    Boolean          @default(false)
  type         String?
  releaseDate  DateTime         @default(now())
  enabled      Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  minPrice     String?
  isPriceFixed Boolean          @default(false)
}

model Track {
  id           Int         @id @default(autoincrement())
  trackGroup   TrackGroup  @relation(fields: [trackGroupId], references: [id])
  trackGroupId Int
  title        String?
  audio        TrackAudio?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  isPreview    Boolean     @default(true)
}

model TrackGroupCover {
  id               String     @id @default(uuid()) @db.Uuid
  url              String[]
  trackGroup       TrackGroup @relation(fields: [trackGroupId], references: [id])
  trackGroupId     Int        @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  originalFilename String?
}

model TrackAudio {
  id               String   @id @default(uuid()) @db.Uuid
  url              String?
  track            Track?   @relation(fields: [trackId], references: [id])
  trackId          Int?     @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  originalFilename String?
  duration         Int?
  hash             String?
  size             Int?
}
